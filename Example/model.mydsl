STR_T1_SW_1560_1   :   "BSW shall have state software_mode with values software_mode_stateSet"   { system: BSW shall have state state: software_mode with values stateSet: software_mode_stateSet   } 
STR_T1_SW_1560_2   :   "BM shall belong to software_mode_stateSet"   { stateValue: BM shall belong to stateSet: software_mode_stateSet   } 
STR_T1_SW_1560_4   :   "SBM shall belong to software_mode_stateSet"   { stateValue: SBM shall belong to stateSet: software_mode_stateSet   } 
STR_T1_SW_1572_1   :   "If (starTracker performs power_on or (CPU performs cpu_reset)), CPU shall perform start_execute_BSW_image"   { if ( system: starTracker performs function: power_on    or ( system: CPU performs function: cpu_reset   ) ) system: CPU shall perform function: start_execute_BSW_image   } 
STR_T1_SW_1572_2   :   "start_execute_BSW_image shall invoke enter_BM"   { function: start_execute_BSW_image shall invoke function: enter_BM   } 
STR_T1_SW_1572_3   :   "BSW shall perform enter_BM"   { system: BSW shall perform function: enter_BM   } 
STR_T1_SW_1572_4   :   "enter_BM shall set software_mode to BM"   { function: enter_BM shall set state: software_mode to stateValue: BM   } 
STR_T1_SW_1576_1   :   "BSW shall perform power_off_both_Ohs, sequentially to enter_BM"   { system: BSW shall perform function: power_off_both_Ohs sequentially to function: enter_BM   } 
STR_T1_SW_1578_1   :   "BSW shall perform copy_ASW_image_in_NVM_to_RAM, sequentially to power_off_both_Ohs"   { system: BSW shall perform function: copy_ASW_image_in_NVM_to_RAM sequentially to function: power_off_both_Ohs   } 
STR_T1_SW_1578_2   :   "BSW shall perform set_boot_report, sequentially to copy_ASW_image_in_NVM_to_RAM"   { system: BSW shall perform function: set_boot_report sequentially to function: copy_ASW_image_in_NVM_to_RAM   } 
STR_T1_SW_1578_3   :   "As soon as (BSW performs copy_ASW_image_in_NVM_to_RAM), set_boot_report shall set Boot_Report"   { as soon ( system: BSW performs function: copy_ASW_image_in_NVM_to_RAM   ) function: set_boot_report shall set item: Boot_Report   } 
STR_T1_SW_1584_1   :   "As soon as BSW performs copy_ASW_image_in_NVM_to_RAM, BSW shall perform signal_BSW_available_for_commanding"   { as soon ( system: BSW performs function: copy_ASW_image_in_NVM_to_RAM   ) system: BSW shall perform function: signal_BSW_available_for_commanding   } 
STR_T1_SW_1584_2   :   "signal_BSW_available_for_commanding shall emit BSW_commanding_availability_signal"   { function: signal_BSW_available_for_commanding shall emit flow: BSW_commanding_availability_signal   } 
STR_T1_SW_1585_1   :   "BSW shall set stay_in_BM_flag to False, concurrently with signal_BSW_available_for_commanding"   { system: BSW shall set item: stay_in_BM_flag to stateValue: False concurrently with function: signal_BSW_available_for_commanding   } 
STR_T1_SW_1585_2   :   "As long as stay_in_BM_flag is False, BSW shall perform autonomous_mode_transition_to_configuration_mode, for at most 5 seconds from BSW_commanding_availability_signal"   { as long ( item: stay_in_BM_flag is stateValue: False   ) system: BSW shall perform function: autonomous_mode_transition_to_configuration_mode for at most   5   seconds from flow: BSW_commanding_availability_signal   } 
STR_T1_SW_1585_3   :   "if BSW software_mode is BM and as soon as BSW receives stay_in_BM_command, BSW shall set stay_in_BM_flag to True, within 5 seconds from BSW_commanding_availability_signal"   { if ( system: BSW state: software_mode is stateValue: BM   ) and as soon ( system: BSW receives item: stay_in_BM_command   ) system: BSW shall set item: stay_in_BM_flag to stateValue: True within   5   seconds from flow: BSW_commanding_availability_signal   } 
STR_T1_SW_1585_4   :   "stay_in_BM_flag shall take values from Boolean"   { item: stay_in_BM_flag shall take values from stateSet: Boolean   } 
STR_T1_SW_1585_5   :   "stay_in_BM_command shall be a pus_service_requests"   { item: stay_in_BM_command shall be a item: pus_service_requests   } 
STR_T1_SW_1585_6   :   "autonomous_mode_transition_to_configuration_mode shall set software_mode to SBM"   { function: autonomous_mode_transition_to_configuration_mode shall set state: software_mode to stateValue: SBM   } 
STR_T1_SW_1586_1   :   "if (BSW software_mode is BM), BSW shall receive at most 1 mode_transition_command"   { if ( system: BSW state: software_mode is stateValue: BM   ) system: BSW shall receive at most   1 item: mode_transition_command   } 
STR_T1_SW_1586_2   :   "mode_transition_command_to_BM shall be a mode_transition_command"   { item: mode_transition_command_to_BM shall be a item: mode_transition_command   } 
STR_T1_SW_1586_3   :   "mode_transition_command_to_configuration_mode shall be a mode_transition_command"   { item: mode_transition_command_to_configuration_mode shall be a item: mode_transition_command   } 
STR_T1_SW_1586_4   :   "mode_transition_command shall be a pus_service_requests"   { item: mode_transition_command shall be a item: pus_service_requests   } 
STR_T1_SW_1572_5   :   "mode_transition_command_to_configuration_mode shall set software_mode to SBM"   { function: mode_transition_command_to_configuration_mode shall set state: software_mode to stateValue: SBM   } 
STR_T1_SW_1591_1   :   "if (BSW software_mode is BM) and as soon as BSW receives mode_transition_command_to_BM, CPU shall perform cpu_reset"   { if ( system: BSW state: software_mode is stateValue: BM   ) and as soon ( system: BSW receives item: mode_transition_command_to_BM   ) system: CPU shall perform function: cpu_reset   } 
STR_T1_SW_2168_1   :   "if (NVM_power_status is False) and as soon as BSW performs autonomous_mode_transition_to_configuration_mode or BSW performs commanded_mode_transition_to_configuration_mode, BSW shall perform power_on_NVM"   { if ( item: NVM_power_status is stateValue: False   ) and as soon ( system: BSW performs function: autonomous_mode_transition_to_configuration_mode    or ( system: BSW performs function: commanded_mode_transition_to_configuration_mode   ) ) system: BSW shall perform function: power_on_NVM   } 
STR_T1_SW_2168_2   :   "NVM_power_status shall take values from Boolean"   { item: NVM_power_status shall take values from stateSet: Boolean   } 
STR_T1_SW_2168_3   :   "power_on_NVM shall set NVM_power_status to True"   { function: power_on_NVM shall set item: NVM_power_status to stateValue: True   } 
STR_T1_SW_1624_1   :   "BSW shall perform accept_pus_service_requests"   { system: BSW shall perform function: accept_pus_service_requests   } 
STR_T1_SW_1624_2   :   "accept_pus_service_requests shall receive pus_service_requests"   { function: accept_pus_service_requests shall receive item: pus_service_requests   } 
STR_T1_SW_1625_1   :   "BSW shall perform generate_pus_service_reports"   { system: BSW shall perform function: generate_pus_service_reports   } 
STR_T1_SW_1625_2   :   "generate_pus_service_reports shall send pus_service_reports"   { function: generate_pus_service_reports shall send item: pus_service_reports   } 
STR_T1_SW_1626_1   :   "spacecraft_interface shall transfer pus_service_requests"   { interface: spacecraft_interface shall transfer item: pus_service_requests   } 
STR_T1_SW_1626_2   :   "BSW shall present spacecraft_Interface to spacecraft"   { system: BSW shall present interface: spacecraft_interface to system: spacecraft   } 
STR_T1_SW_1629_1   :   "As soon as BSW performs accept_pus_service_requests and unless BSW is in failed_acceptance, BSW shall perform start_pus_service_request_execution"   { as soon ( system: BSW performs function: accept_pus_service_requests   ) and unless ( system: BSW is in error: failed_acceptance   ) system: BSW shall perform function: start_pus_service_request_execution   } 
STR_T1_SW_1629_2   :   "As soon as BSW performs accept_pus_service_requests and if BSW is in failed_acceptance, BSW shall perform send_1_pus_TM_1_2_Failed_Acceptance_Verification_Report"   { as soon ( system: BSW performs function: accept_pus_service_requests   ) and if ( system: BSW is in error: failed_acceptance   ) system: BSW shall perform function: send_1_pus_TM_1_2_Failed_Acceptance_Verification_Report   } 
STR_T1_SW_1629_3   :   "As soon as BSW performs accept_pus_service_requests and if BSW is in failed_acceptance, BSW shall exit failed_acceptance"   { as soon ( system: BSW performs function: accept_pus_service_requests   ) and if ( system: BSW is in error: failed_acceptance   ) system: BSW shall exit error: failed_acceptance   } 
STR_T1_SW_1629_4   :   "BSW shall exit failed_acceptance, sequentially to send_1_pus_TM_1_2_Failed_Acceptance_Verification_Report"   { system: BSW shall exit error: failed_acceptance sequentially to function: send_1_pus_TM_1_2_Failed_Acceptance_Verification_Report   } 
STR_T1_SW_1629_5   :   "send_1_pus_TM_1_2_Failed_Acceptance_Verification_Report shall send exactly 1 pus_TM_1_2_Failed_Acceptance_Verification_Report"   { function: send_1_pus_TM_1_2_Failed_Acceptance_Verification_Report shall send exactly   1 item: pus_TM_1_2_Failed_Acceptance_Verification_Report   } 
STR_T1_SW_1629_6   :   "pus_TM_1_2_Failed_Acceptance_Verification_Report shall be a pus_service_reports"   { item: pus_TM_1_2_Failed_Acceptance_Verification_Report shall be a item: pus_service_reports   } 
STR_T1_SW_1629_7   :   "As soon as BSW performs start_pus_service_request_execution and unless BSW is in failed_start, BSW shall perform send_1_pus_TM_1_3_successful_start_of_execution_verification_report"   { as soon ( system: BSW performs function: start_pus_service_request_execution   ) and unless ( system: BSW is in error: failed_start   ) system: BSW shall perform function: send_1_pus_TM_1_3_successful_start_of_execution_verification_report   } 
STR_T1_SW_1629_8   :   "As soon as BSW performs start_pus_service_request_execution and unless BSW is in failed_start, BSW shall perform execute_pus_service_request"   { as soon ( system: BSW performs function: start_pus_service_request_execution   ) and unless ( system: BSW is in error: failed_start   ) system: BSW shall perform function: execute_pus_service_request   } 
STR_T1_SW_1629_9   :   "BSW shall perform execute_pus_service_request, sequentially to send_1_pus_TM_1_3_successful_start_of_execution_verification_report"   { system: BSW shall perform function: execute_pus_service_request sequentially to function: send_1_pus_TM_1_3_successful_start_of_execution_verification_report   } 
STR_T1_SW_1629_10   :   "send_1_pus_TM_1_3_successful_start_of_execution_verification_report shall send exactly 1 pus_TM_1_3_successful_start_of_execution_verification_report"   { function: send_1_pus_TM_1_3_successful_start_of_execution_verification_report shall send exactly   1 item: pus_TM_1_3_successful_start_of_execution_verification_report   } 
STR_T1_SW_1629_11   :   "pus_TM_1_3_successful_start_of_execution_verification_report shall be a pus_service_reports"   { item: pus_TM_1_3_successful_start_of_execution_verification_report shall be a item: pus_service_reports   } 
STR_T1_SW_1629_12   :   "As soon as BSW performs start_pus_service_request_execution and if BSW is in failed_start, BSW shall perform send_1_pus_TM_1_4_Failed_Start_of_Execution_Verification_Report"   { as soon ( system: BSW performs function: start_pus_service_request_execution   ) and if ( system: BSW is in error: failed_start   ) system: BSW shall perform function: send_1_pus_TM_1_4_Failed_Start_of_Execution_Verification_Report   } 
STR_T1_SW_1629_13   :   "As soon as BSW performs start_pus_service_request_execution and if BSW is in failed_start, BSW shall exit failed_start"   { as soon ( system: BSW performs function: start_pus_service_request_execution   ) and if ( system: BSW is in error: failed_start   ) system: BSW shall exit error: failed_start   } 
STR_T1_SW_1629_14   :   "BSW shall exit failed_start, sequentially to send_1_pus_TM_1_4_Failed_Start_of_Execution_Verification_Report"   { system: BSW shall exit error: failed_start sequentially to function: send_1_pus_TM_1_4_Failed_Start_of_Execution_Verification_Report   } 
STR_T1_SW_1629_15   :   "send_1_pus_TM_1_4_Failed_Start_of_Execution_Verification_Report shall send 1 pus_TM_1_4_Failed_Start_of_Execution_Verification_Report"   { function: send_1_pus_TM_1_4_Failed_Start_of_Execution_Verification_Report shall send exactly   1 item: pus_TM_1_4_Failed_Start_of_Execution_Verification_Report   } 
STR_T1_SW_1629_16   :   "pus_TM_1_4_Failed_Start_of_Execution_Verification_Report shall be a pus_service_reports"   { item: pus_TM_1_4_Failed_Start_of_Execution_Verification_Report shall be a item: pus_service_reports   } 
STR_T1_SW_1629_17   :   "As soon as BSW performs execute_pus_service_request and unless BSW is in failed_execution, BSW shall send 1 pus_TM_1_7_successful_completion_of_execution_verification_report"   { as soon ( system: BSW performs function: execute_pus_service_request   ) and unless ( system: BSW is in error: failed_execution   ) system: BSW shall send exactly 1 item: pus_TM_1_7_successful_completion_of_execution_verification_report   } 
STR_T1_SW_1629_18   :   "As soon as BSW performs execute_pus_service_request and BSW is in failed_execution, BSW shall perform send_1_pus_TM_1_8_Failed_Completion_of_Execution_Verification_Report"   { as soon ( system: BSW performs function: execute_pus_service_request    and ( system: BSW is in error: failed_execution   ) ) system: BSW shall perform function: send_1_pus_TM_1_8_Failed_Completion_of_Execution_Verification_Report   } 
STR_T1_SW_1629_19   :   "As soon as BSW performs execute_pus_service_request and BSW is in failed_execution, BSW shall exit failed_execution"   { as soon ( system: BSW performs function: execute_pus_service_request    and ( system: BSW is in error: failed_execution   ) ) system: BSW shall exit error: failed_execution   } 
STR_T1_SW_1629_20   :   "BSW shall exit failed_execution, sequentially to send_1_pus_TM_1_8_Failed_Completion_of_Execution_Verification_Report"   { system: BSW shall exit error: failed_execution sequentially to function: send_1_pus_TM_1_8_Failed_Completion_of_Execution_Verification_Report   } 
STR_T1_SW_1629_21   :   "send_1_pus_TM_1_8_Failed_Completion_of_Execution_Verification_Report shall send exactly 1 pus_TM_1_8_Failed_Completion_of_Execution_Verification_Report"   { function: send_1_pus_TM_1_8_Failed_Completion_of_Execution_Verification_Report shall send exactly   1 item: pus_TM_1_8_Failed_Completion_of_Execution_Verification_Report   } 
STR_T1_SW_1629_22   :   "pus_TM_1_8_Failed_Completion_of_Execution_Verification_Report shall be a pus_service_reports"   { item: pus_TM_1_8_Failed_Completion_of_Execution_Verification_Report shall be a item: pus_service_reports   } 
STR_T1_SW_1636_1   :   "if BSW performs dump_contents_of_any_readable_part_of_memory and BSW receives pus_TC_6_5_dump_raw_memory_area_service_request BSW shall perform send_1_pus_TM_1_4_Failed_Start_of_Execution_Verification_Report"   { if ( system: BSW performs function: dump_contents_of_any_readable_part_of_memory    and ( system: BSW receives item: pus_TC_6_5_dump_raw_memory_area_service_request   ) ) system: BSW shall perform function: send_1_pus_TM_1_4_Failed_Start_of_Execution_Verification_Report   } 
STR_T1_SW_1640_1   :   "spacecraft_interface shall transfer pus_service_reports"   { interface: spacecraft_interface shall transfer item: pus_service_reports   } 
STR_T1_SW_1652_1   :   "if (BSW software_mode is BM), BSW shall receive pus_TC_6_2_load_raw_memory_data_area_service_request"   { if ( system: BSW state: software_mode is stateValue: BM   ) system: BSW shall receive item: pus_TC_6_2_load_raw_memory_data_area_service_request   } 
STR_T1_SW_1652_2   :   "pus_TC_6_2_load_raw_memory_data_area_service_request shall be a pus_service_requests"   { item: pus_TC_6_2_load_raw_memory_data_area_service_request shall be a item: pus_service_requests   } 
STR_T1_SW_1652_3   :   "if (BSW receives pus_TC_6_2_load_raw_memory_data_area_service_request), BSW shall perform update_any_writeable_part_of_memory"   { if ( system: BSW receives item: pus_TC_6_2_load_raw_memory_data_area_service_request   ) system: BSW shall perform function: update_any_writeable_part_of_memory   } 
STR_T1_SW_1655_1   :   "if (BSW software_mode is BM), BSW shall receive pus_TC_6_5_dump_raw_memory_area_service_request"   { if ( system: BSW state: software_mode is stateValue: BM   ) system: BSW shall receive item: pus_TC_6_5_dump_raw_memory_area_service_request   } 
STR_T1_SW_1655_2   :   "BSW pus_TC_6_5_dump_raw_memory_area_service_request shall be a pus_service_requests"   { item: pus_TC_6_5_dump_raw_memory_area_service_request shall be a item: pus_service_requests   } 
STR_T1_SW_1655_3   :   "if (BSW receives pus_TC_6_5_dump_raw_memory_area_service_request), BSW shall perform dump_contents_of_any_readable_part_of_memory"   { if ( system: BSW receives item: pus_TC_6_5_dump_raw_memory_area_service_request   ) system: BSW shall perform function: dump_contents_of_any_readable_part_of_memory   } 
STR_T1_SW_1658_1   :   "As soon as BSW performs dump_contents_of_any_readable_part_of_memory, BSW shall send at least 1 pus_TM_6_6_dumped_raw_memory_data_report"   { as soon ( system: BSW performs function: dump_contents_of_any_readable_part_of_memory   ) system: BSW shall send at least   1 item: pus_TM_6_6_dumped_raw_memory_data_report   } 
STR_T1_SW_1658_2   :   "pus_TM_6_6_dumped_raw_memory_data_report shall be a pus_service_reports"   { item: pus_TM_6_6_dumped_raw_memory_data_report shall be a item: pus_service_reports   } 
STR_T1_SW_2159_1   :   "if (BSW software_mode is BM), BSW shall receive pus_TC_open_NVM_sector_for_writing_service_request"   { if ( system: BSW state: software_mode is stateValue: BM   ) system: BSW shall receive item: pus_TC_open_NVM_sector_for_writing_service_request   } 
STR_T1_SW_2159_2   :   "pus_TC_open_NVM_sector_for_writing_service_request shall be a pus_service_requests"   { item: pus_TC_open_NVM_sector_for_writing_service_request shall be a item: pus_service_requests   } 
STR_T1_SW_2159_3   :   "if (BSW receives pus_TC_open_NVM_sector_for_writing_service_request), BSW shall perform copy_NVM_sector_contents_to_RAM_scratchpad_area"   { if ( system: BSW receives item: pus_TC_open_NVM_sector_for_writing_service_request   ) system: BSW shall perform function: copy_NVM_sector_contents_to_RAM_scratchpad_area   } 
STR_T1_SW_2160_1   :   "if (BSW software_mode is BM), BSW shall receive pus_TC_close_NVM_sector_service_request"   { if ( system: BSW state: software_mode is stateValue: BM   ) system: BSW shall receive item: pus_TC_close_NVM_sector_service_request   } 
STR_T1_SW_2160_2   :   "pus_TC_close_NVM_sector_service_request shall be a pus_service_requests"   { item: pus_TC_close_NVM_sector_service_request shall be a item: pus_service_requests   } 
STR_T1_SW_2160_3   :   "if (BSW receives pus_TC_close_NVM_sector_service_request), BSW shall perform discard_RAM_scratchpad_area"   { if ( system: BSW receives item: pus_TC_close_NVM_sector_service_request   ) system: BSW shall perform function: discard_RAM_scratchpad_area   } 
STR_T1_SW_2161_1   :   "BSW shall send all pus_TM_6_6_dumped_raw_memory_data_report, concurrently with generate_pus_service_reports"   { system: BSW shall send all item: pus_TM_6_6_dumped_raw_memory_data_report concurrently with function: generate_pus_service_reports   } 
STR_T1_SW_1664_1   :   "if (BSW software_mode is BM), BSW shall receive pus_TC_6_9_check_raw_memory_data_service_request"   { if ( system: BSW state: software_mode is stateValue: BM   ) system: BSW shall receive item: pus_TC_6_9_check_raw_memory_data_service_request   } 
STR_T1_SW_1664_2   :   "pus_TC_6_9_check_raw_memory_data_service_request shall be a pus_service_requests"   { item: pus_TC_6_9_check_raw_memory_data_service_request shall be a item: pus_service_requests   } 
STR_T1_SW_1664_3   :   "if (BSW receives pus_TC_6_9_check_raw_memory_data_service_request), BSW shall perform calculate_checksum_of_the_contents_of_any_readable_part_of_memory"   { if ( system: BSW receives item: pus_TC_6_9_check_raw_memory_data_service_request   ) system: BSW shall perform function: calculate_checksum_of_the_contents_of_any_readable_part_of_memory   } 
STR_T1_SW_1667_1   :   "As soon as BSW performs calculate_checksum_of_the_contents_of_any_readable_part_of_memory, BSW shall send exactly 1 pus_6_10_checked_raw_memory_data_report"   { as soon ( system: BSW performs function: calculate_checksum_of_the_contents_of_any_readable_part_of_memory   ) system: BSW shall send exactly   1 item: pus_6_10_checked_raw_memory_data_report   } 
STR_T1_SW_1667_2   :   "pus_6_10_checked_raw_memory_data_report shall be a pus_service_reports"   { item: pus_6_10_checked_raw_memory_data_report shall be a item: pus_service_reports   } 
STR_T1_SW_1669_1   :   "BSW shall perform power_on_NVM before access_NVM_signal"   { system: BSW shall perform function: power_on_NVM before flow: access_NVM_signal   } 
STR_T1_SW_1669_2   :   "BSW shall perform update_any_writeable_part_of_memory, after access_NVM_signal"   { system: BSW shall perform function: update_any_writeable_part_of_memory after flow: access_NVM_signal   } 
STR_T1_SW_1669_3   :   "BSW shall perform dump_contents_of_any_readable_part_of_memory, after access_NVM_signal"   { system: BSW shall perform function: dump_contents_of_any_readable_part_of_memory after flow: access_NVM_signal   } 
STR_T1_SW_1669_4   :   "BSW shall perform copy_NVM_sector_contents_to_RAM_scratchpad_area, after access_NVM_signal"   { system: BSW shall perform function: copy_NVM_sector_contents_to_RAM_scratchpad_area after flow: access_NVM_signal   } 
STR_T1_SW_1669_5   :   "BSW shall perform calculate_checksum_of_the_contents_of_any_readable_part_of_memory, after access_NVM_signal"   { system: BSW shall perform function: calculate_checksum_of_the_contents_of_any_readable_part_of_memory after flow: access_NVM_signal   } 
STR_T1_SW_1669_6   :   "BSW shall perform copy_ASW_image_in_NVM_to_RAM, after access_NVM_signal"   { system: BSW shall perform function: copy_ASW_image_in_NVM_to_RAM after flow: access_NVM_signal   } 
STR_T1_SW_1669_7   :   "if BSW receives pus_TC_6_2_load_raw_memory_data_area_service_request or BSW receives pus_TC_6_5_dump_raw_memory_area_service_request or BSW receives pus_TC_6_9_check_raw_memory_data_service_request or BSW receives pus_TC_close_NVM_sector_service_request or BSW receives pus_TC_open_NVM_sector_for_writing_service_request or as soon as BSW performs power_on_NVM, BSW shall emit access_NVM_signal"   { if ( system: BSW receives item: pus_TC_6_2_load_raw_memory_data_area_service_request   or ( system: BSW receives item: pus_TC_6_5_dump_raw_memory_area_service_request   or ( system: BSW receives item: pus_TC_6_9_check_raw_memory_data_service_request   or ( system: BSW receives item: pus_TC_close_NVM_sector_service_request   or ( system: BSW receives item: pus_TC_open_NVM_sector_for_writing_service_request   ) ) ) ) ) or as soon ( system: BSW performs function: power_on_NVM   ) system: BSW shall emit flow: access_NVM_signal   } 
STR_T1_SW_1670_1   :   "BSW shall perform power_off_NVM, for at most 180 seconds from access_NVM_signal"   { system: BSW shall perform function: power_off_NVM for at most   180   seconds from flow: access_NVM_signal   } 
STR_T1_SW_1670_2   :   "power_off_NVM shall set NVM_power_status to False"   { function: power_off_NVM shall set item: NVM_power_status to stateValue: False   } 
STR_T1_SW_1730_1   :   "if (BSW software_mode is BM), BSW shall set EU_HK_data"   { if ( system: BSW state: software_mode is stateValue: BM   ) system: BSW shall set item: EU_HK_data   } 
STR_T1_SW_1730_2   :   "EU_HK_data shall be composed from five_V0_voltage"   { item: EU_HK_data shall be composed from item: five_V0_voltage   } 
STR_T1_SW_1730_3   :   "EU_HK_data shall be composed from three_V3_voltage"   { item: EU_HK_data shall be composed from item: three_V3_voltage   } 
STR_T1_SW_1730_4   :   "EU_HK_data shall be composed from one_V8_voltage"   { item: EU_HK_data shall be composed from item: one_V8_voltage   } 
STR_T1_SW_1730_5   :   "EU_HK_data shall be composed from EU_thermistor"   { item: EU_HK_data shall be composed from item: EU_thermistor   } 
STR_T1_SW_1730_6   :   "EU_HK_data shall be composed from OH1_current"   { item: EU_HK_data shall be composed from item: OH1_current   } 
STR_T1_SW_1730_7   :   "EU_HK_data shall be composed from OH2_current"   { item: EU_HK_data shall be composed from item: OH2_current   } 
STR_T1_SW_1730_8   :   "EU_HK_data shall be composed from OH1_additional_thermistor"   { item: EU_HK_data shall be composed from item: OH1_additional_thermistor   } 
STR_T1_SW_1730_9   :   "EU_HK_data shall be composed from OH2_additional_thermistor"   { item: EU_HK_data shall be composed from item: OH2_additional_thermistor   } 
STR_T1_SW_2134_1   :   "if (BSW software_mode is BM), BSW shall set SW_HK_data"   { if ( system: BSW state: software_mode is stateValue: BM   ) system: BSW shall set item: SW_HK_data   } 
STR_T1_SW_2134_2   :   "SW_HK_data shall be composed from BSW_version_ID"   { item: SW_HK_data shall be composed from item: BSW_version_ID   } 
STR_T1_SW_2134_3   :   "SW_HK_data shall be composed from Boot_Report"   { item: SW_HK_data shall be composed from item: Boot_Report   } 
STR_T1_SW_1738_1   :   "if (BSW software_mode is BM), generate_pus_TM_3_25_housekeeping_parameter_report shall send pus_TM_3_25_housekeeping_parameter_report_with_dedicated_SID"   { if ( system: BSW state: software_mode is stateValue: BM   ) function: generate_pus_TM_3_25_housekeeping_parameter_report shall send item: pus_TM_3_25_housekeeping_parameter_report_with_dedicated_SID   } 
STR_T1_SW_1738_2   :   "pus_TM_3_25_housekeeping_parameter_report_with_dedicated_SID shall be a pus_TM_3_25_housekeeping_parameter_report"   { item: pus_TM_3_25_housekeeping_parameter_report_with_dedicated_SID shall be a item: pus_TM_3_25_housekeeping_parameter_report   } 
STR_T1_SW_1738_3   :   "pus_TM_3_25_housekeeping_parameter_report shall be a pus_service_reports"   { item: pus_TM_3_25_housekeeping_parameter_report shall be a item: pus_service_reports   } 
STR_T1_SW_1743_1   :   "if (BSW software_mode is BM) and (BSW receives mission_specific_pus_housekeeping_parameter_service_request), BSW shall perform generate_pus_TM_3_25_housekeeping_parameter_report"   { if ( system: BSW state: software_mode is stateValue: BM   and ( system: BSW receives item: mission_specific_pus_housekeeping_parameter_service_request   ) ) system: BSW shall perform function: generate_pus_TM_3_25_housekeeping_parameter_report   } 
STR_T1_SW_1743_2   :   "if (BSW software_mode is BM), generate_pus_TM_3_25_housekeeping_parameter_report shall send exactly 1 pus_TM_3_25_housekeeping_parameter_report_with_dedicated_SID"   { if ( system: BSW state: software_mode is stateValue: BM   ) function: generate_pus_TM_3_25_housekeeping_parameter_report shall send exactly   1 item: pus_TM_3_25_housekeeping_parameter_report_with_dedicated_SID   } 
STR_T1_SW_1743_3   :   "pus_TM_3_25_housekeeping_parameter_report_with_dedicated_SID shall be composed from EU_HK_data"   { item: pus_TM_3_25_housekeeping_parameter_report_with_dedicated_SID shall be composed from item: EU_HK_data   } 
STR_T1_SW_1743_4   :   "pus_TM_3_25_housekeeping_parameter_report_with_dedicated_SID shall be composed from SW_HK_data"   { item: pus_TM_3_25_housekeeping_parameter_report_with_dedicated_SID shall be composed from item: SW_HK_data   } 
STR_T1_SW_1743_5   :   "if (BSW software_mode is BM), BSW shall receive mission_specific_pus_housekeeping_parameter_service_request"   { if ( system: BSW state: software_mode is stateValue: BM   ) system: BSW shall receive item: mission_specific_pus_housekeeping_parameter_service_request   } 
STR_T1_SW_1743_6   :   "mission_specific_pus_housekeeping_parameter_service_request shall be a pus_service_requests"   { item: mission_specific_pus_housekeeping_parameter_service_request shall be a item: pus_service_requests   } 
STR_T1_SW_1769_1   :   "BSW shall perform refresh_hardware_watchdog"   { system: BSW shall perform function: refresh_hardware_watchdog   } 
STR_T1_SW_1772_1   :   "if uncorrectable_memory_error occurs, SRAM shall enter uncorrectable_EDAC_error"   { if ( fault: uncorrectable_memory_error occurs ) system: SRAM shall enter error: uncorrectable_EDAC_error   } 
STR_T1_SW_1772_2   :   "if SRAM is in uncorrectable_EDAC_error, uncorrectable_EDAC_error shall cause uncorrectable_EDAC_error_failure"   { if ( system: SRAM is in error: uncorrectable_EDAC_error   ) error: uncorrectable_EDAC_error shall cause failure: uncorrectable_EDAC_error_failure   } 
STR_T1_SW_1772_3   :   "BSW shall ingest uncorrectable_EDAC_error_failure"   { system: BSW shall ingest flow: uncorrectable_EDAC_error_failure   } 
STR_T1_SW_1772_4   :   "As soon as BSW ingests uncorrectable_EDAC_error_failure, BSW shall set cease_refresh_hardware_watchdog to True"   { as soon ( system: BSW ingests failure: uncorrectable_EDAC_error_failure   ) system: BSW shall set item: cease_refresh_hardware_watchdog to stateValue: True   } 
STR_T1_SW_1772_5   :   "if cease_refresh_hardware_watchdog is True, BSW shall emit ceasing_watchdog_refresh_interrupt"   { if ( item: cease_refresh_hardware_watchdog is stateValue: True   ) system: BSW shall emit flow: ceasing_watchdog_refresh_interrupt   } 
STR_T1_SW_1772_6   :   "CPU shall ingest ceasing_watchdog_refresh_interrupt"   { system: CPU shall ingest flow: ceasing_watchdog_refresh_interrupt   } 
STR_T1_SW_1772_7   :   "As soon as CPU ingests ceasing_watchdog_refresh_interrupt, CPU shall perform cpu_reset"   { as soon ( system: CPU ingests flow: ceasing_watchdog_refresh_interrupt   ) system: CPU shall perform function: cpu_reset   } 
STR_T1_SW_1772_8   :   "As soon as CPU performs cpu_reset, SRAM shall exit uncorrectable_EDAC_error"   { as soon ( system: CPU performs function: cpu_reset   ) system: SRAM shall exit error: uncorrectable_EDAC_error   } 
STR_T1_SW_1772_9   :   "As soon as CPU performs cpu_reset, BSW shall set cease_refresh_hardware_watchdog to False"   { as soon ( system: CPU performs function: cpu_reset   ) system: BSW shall set item: cease_refresh_hardware_watchdog to stateValue: False   } 
STR_T1_SW_1775_1   :   "BSW shall perform write_information_regarding_the_unrecoverable_error_occurrence_into_memory, before ceasing_watchdog_refresh_interrupt"   { system: BSW shall perform function: write_information_regarding_the_unrecoverable_error_occurrence_into_memory before flow: ceasing_watchdog_refresh_interrupt   } 
STR_T1_SW_1779_1   :   "if SRAM is in correctable_EDAC_error, correctable_EDAC_error shall cause correctable_EDAC_error_failure"   { if ( system: SRAM is in error: correctable_EDAC_error   ) error: correctable_EDAC_error shall cause failure: correctable_EDAC_error_failure   } 
STR_T1_SW_1779_2   :   "BSW shall ingest correctable_EDAC_error_failure"   { system: BSW shall ingest flow: correctable_EDAC_error_failure   } 
STR_T1_SW_1779_3   :   "As soon as BSW ingests correctable_EDAC_error_failure, BSW shall perform scrub_any_memory_words_for_which_the_HW_detects_a_correctable_memory_error"   { as soon ( system: BSW ingests failure: correctable_EDAC_error_failure   ) system: BSW shall perform function: scrub_any_memory_words_for_which_the_HW_detects_a_correctable_memory_error   } 
STR_T1_SW_1779_4   :   "if BSW performs scrub_any_memory_words_for_which_the_HW_detects_a_correctable_memory_error, SRAM shall exit correctable_EDAC_error"   { if ( system: BSW performs function: scrub_any_memory_words_for_which_the_HW_detects_a_correctable_memory_error   ) system: SRAM shall exit error: correctable_EDAC_error   } 
STR_T1_SW_1781_1   :   "BSW shall set number_of_memory_cells_with_correctable_errors_HK_data"   { system: BSW shall set item: number_of_memory_cells_with_correctable_errors_HK_data   } 
STR_T1_SW_1781_2   :   "pus_TM_3_25_housekeeping_parameter_report_with dedicated_SID shall be composed from number_of_memory_cells_with_correctable_errors_HK_data"   { item: pus_TM_3_25_housekeeping_parameter_report_with_dedicated_SID shall be composed from item: number_of_memory_cells_with_correctable_errors_HK_data   } 
STR_T1_SW_2166_1   :   "nominal_spacecraft_interface shall be a spacecraft_interface"   { interface: nominal_spacecraft_interface shall be a interface: spacecraft_interface   } 
STR_T1_SW_2166_2   :   "redundant_spacecraft_interface shall be a spacecraft_interface"   { interface: redundant_spacecraft_interface shall be a interface: spacecraft_interface   } 
STR_T1_SW_2166_3   :   "if (last_interface_used is nominal_SC_interface) nominal_spacecraft_interface shall transfer pus_service_reports"   { if ( item: last_interface_used is stateValue: nominal_SC_interface   ) interface: nominal_spacecraft_interface shall transfer item: pus_service_reports   } 
STR_T1_SW_2166_4   :   "if (last_interface_used is redudant_SC_interface) redundant_spacecraft_interface shall transfer pus_service_reports"   { if ( item: last_interface_used is stateValue: redudant_SC_interface   ) interface: redundant_spacecraft_interface shall transfer item: pus_service_reports   } 
STR_T1_SW_2166_5   :   "if accept_pus_service_requests receives pus_service_requests, BSW shall set last_interface_used"   { if ( function: accept_pus_service_requests receives item: pus_service_requests   ) system: BSW shall set item: last_interface_used   } 
STR_T1_SW_2166_6   :   "last_interface_used shall take values from SC_interface_stateSet"   { item: last_interface_used shall take values from stateSet: SC_interface_stateSet   } 
STR_T1_SW_2166_7   :   "nominal_SC_interface shall belong to SC_interface_stateSet"   { stateValue: nominal_SC_interface shall belong to stateSet: SC_interface_stateSet   } 
STR_T1_SW_2166_8   :   "redudant_SC_interface shall belong to SC_interface_stateSet"   { stateValue: redudant_SC_interface shall belong to stateSet: SC_interface_stateSet   } 
STR_T1_SW_1913_1   :   "BSW shall interact with spacecraft using spacewire"   { system: BSW shall interact with system: spacecraft using connection: spacewire   } 
STR_T1_SW_1913_2   :   "BSW shall interact with spacecraft using UART"   { system: BSW shall interact with system: spacecraft using connection: UART   } 
STR_T1_SW_2133_1   :   "spacecraft shall regulate ASW_image"   { environment: spacecraft shall regulate item: ASW_image   } 
STR_T1_SW_2133_2   :   "copy_ASW_image_in_NVM_to_RAM shall receive ASW_image"   { function: copy_ASW_image_in_NVM_to_RAM shall receive item: ASW_image   } 
STR_T1_SW_0000_1   :   "spacecraft shall contain starTracker"   { system: spacecraft shall contain system: starTracker   } 
STR_T1_SW_0000_2   :   "starTracker shall contain CPU"   { system: starTracker shall contain system: CPU   } 
STR_T1_SW_0000_3   :   "starTracker shall contain SRAM"   { system: starTracker shall contain system: SRAM   } 
STR_T1_SW_0000_4   :   "starTracker shall contain BSW"   { system: starTracker shall contain system: BSW   }